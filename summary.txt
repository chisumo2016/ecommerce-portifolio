Factory : Random instance of factory, return the attributes
- Read from github
  php artisan make:factory ProductFactory --model=Product


    php artisan tinker
    factory(App\Product::class)->create();
    factory(App\Product::class)->make();


2: Table Seeder
     -databaseSeeder
        $products = factory(Product::class, 50)->create();

QUERY BUILDER

        //$product =DB::table('products')->where('id', $product)->get();
        //$product =DB::table('products')->where('id', $product)->first();
        $product =DB::table('products')->find($product);
        dd($product);

ORM
   //$product =Product::where('id', $product)->get();
   //$product =Product::where('id', $product)->first();
    $product =Product::find($product);

    dd(request, request->title, request->all());

  Laravel UI

  composer require laravel/ui

  Authenticated system
    Login
    Register
    Logout

    Laravel Mix  to Generate the Frontend Assests

     Compser Json
     package jSON
     WEBPACK JSON
  npm install && npm run dev

Middleware and How to restrict access and actions in laravel
  Middleware - control the specific  to access
      localhost/product/create   we can restrict some access
          http- kernel
          call handle method - authenticated the user
           public function __construct()
               {
                   $this->middleware('auth')->only(['index', 'show']);
               }

                public function __construct()
                   {
                       $this->middleware('auth')->except(['index', 'show']);
                   }


Using Implicit Model Binding In Laravel
   inject to me or bind to this method of an instance of any model
   Done automatically
   Route::get('products/{product}','ProductController@show')->name('products.show');
   Route::get('products/{product:title}','ProductController@show')->name('products.show');
   public  function show(Product  $product)


Resource Routes in Laravel
 -Handle specific model
 -Route::Resource();
 -Plular
 -Nama


 Form Request  to validate Data
   Form request  in a single class
    php artisan make:request  ProductRequest
    return true
    withvalidator
    $product = Product::create($request->all());   better way is -which validate the input
    $product = Product::create($request->validate());

 Using Artisan to create Multiple Components at Once
   Make sure you follow the order based on foreign key
   order table must be existed before you create payment table
   user table must be existed before you create order table

   ORDER TO CREATE
   user
   product
   image
   cart
   order
   payment

php artisan make:model --help
php artisan make:model  Image -a

 Payment       Product          Order           Image          user                     Cart
 id             id              id              id              id                      id
 amount         title           status          path            name                    created_at
 payed_at       description     customer_id     created_at      email                   updated_at
 order_id       price           created_at      updated_at      email_verified_at
 created_at     stock           updated_at                      password
 updated_at     status                                          remember_token
                created_at                                      admin_since
                updated_at                                      created_at
                                                                updated_at

Layouts and components  with laravel blade
  -show the link to handle the product in layouts app
  -show the list of product in main/welcome view
  -Introduce the component in blade by creating a components folder and extends to blade


  Indicating the Columns of the tables in the migrations
     $table->timestamp('admin_since')->nullable();

     Implementing the Additional Model
       Mass Assigements to each model
       PHP Carbon

Implemented the Factories to the Models
 - use faker
 - Image belongs to product and user
 - save for product
 - save for user
 -factory(App\Cart::class)->create();  $instance = App\Cart::factory()->create();
 -factory(App\Payment::class)->create();  $instance = App\Cart::factory()->create();
 -factory(App\Image::class)->create();   $instance = App\Cart::factory()->user()->create();


 RELATIONSHIP

php artsian tinker
>>$cart = factory (App\Cart::class)->create();   -- Laravel 7.4.6 but laravel 8 will throw an error
PHP Fatal Error : call to undefined function factory() in Psy Shell code on line 1 after laravel 8
>>$cart = App\Cart::factory(6)->create();
>>$cart = App\Cart::factory(6)->create(['user_id'=> $user->id]);
>>App\Model::factory();

ONE TO ONE RELATIONSHIP MODEL / TABLE

PAYMENT - ORDER  Payment belongs to an order
  $table->bigInteger('order_id')->unsigned();

  example

        Schema::create('payments', function (Blueprint $table) {
            $table->id();
            $table->float('amount')->unsigned();
            $table->timestamp('payed_at')->nullable();
            $table->bigInteger('order_id')->unsigned();
            $table->timestamps();

            $table->foreign('order_id')->references('id')->on('orders');
        });

        Model Payment

      public  function  order()
         {
             return $this->belongsTo(Order::class);
         }

        public  function  payment()
          {
              return $this->hasOne(Payment::class);
          }

          remember to add mass assigment

          $payment = factory(App\Payment::class)->make(); will not store in database

          >>> $payment = factory(App\Payment::class)->create();
          Illuminate/Database/QueryException with message 'SQLSTATE[HY000]: General error: 1364 Field 'order_id' doesn't have a default value (SQL: insert into `payments` (`amount`, `payed_at`, `updated_at`, `created_at`) values (344.77, 2020-09-08 05:06:04, 2020-11-12 13:03:06, 2020-11-12 13:03:06))'
          This because of foreign key

          We need to create an order first then payment to be able to persist data in the database

         >>> $order = factory(App\Order::class)->create();
         => App\Order {#4041
              status: "paid",
              updated_at: "2020-11-12 13:09:34",
              created_at: "2020-11-12 13:09:34",
              id: 1,
            }

         $payment = factory(App\Payment::class)->create(['order_id'=> 1]); but the better way

          $payment = App\Payment::create(['amount'=>200 , 'payed_at'=>now(), 'order_id'=>2]);

         App\Payment::all();

         using the relationship
         $payment = $order->payment()->save(factory(App\Payment::class)->make());

         Find the Order via relationship

         $order = App\Order::find(1);

         To obtained the Payment through relationship
         $order->payment;

          $order->payment()->get();  query builder

          Inverse
       >>> $payment = App\Payment::find(2);
          >$payment->order;

    ONE TO MANY RELATIONSHIP ELOQUENT
      -Order and User
      -An order must belongs to user  bse of that Order has the foreign key
      -User can have multiple Order
      example
       Schema::create('orders', function (Blueprint $table) {
                   $table->id();
                   $table->string('status')->default('pending');
                   $table->bigInteger('user_id')->unsigned();
                   $table->timestamps();

                   $table->foreign('customer_id')->references('id')->on('users');
               });
   order
    public function  user()
       {
           return $this->belongsTo(User::class, 'customer_id');
       }

   user

   public  function  orders()
   {
      return $this->hasMany(Order::class, 'customer_id') ;
   }

   Tinker to create a user
     $user = factory(App\User::class)->create();

  Let associate the user with an order

  >>> $user->orders()->save(factory(App\Order::class)->make());

  Search the user with ID 1
   $user = App\User::find(1);

   BE CAREFUL
 >>> $user->orders();
 => Illuminate\Database\Eloquent\Relations\HasMany {#4034}

USE  - COLLECTION OF ORDERS
$user->orders;
$order = $user->orders()->first();

>>> $user = factory(App\User::class)->create();
=> App\User {#4037
     name: "Hollie Turner",
     email: "langworth.eldridge@example.com",
     email_verified_at: "2020-11-12 14:04:33",
     admin_since: "2020-11-12 14:04:33",
     updated_at: "2020-11-12 14:04:33",
     created_at: "2020-11-12 14:04:33",
     id: 3,
   }
>>> $user->orders()->save(factory(App\Order::class)->make());
=> App\Order {#4055
     status: "paid",
     customer_id: 3,
     updated_at: "2020-11-12 14:07:00",
     created_at: "2020-11-12 14:07:00",
     id: 2,
   }

 EXAMPLE 2

  >php artisan tinker
 Psy Shell v0.10.4 (PHP 7.4.6 — cli) by Justin Hileman
 >>> $user = factory(App\User::class)->create;
 PHP Notice:  Undefined property: Illuminate/Database/Eloquent/FactoryBuilder::$create in /Users/os/Documents/projects/ecommerce-portifolioeval()'d code on line 1
 => null
 >>> $user = factory(App\User::class)->create();
 => App\User {#4037
      name: "Hollie Turner",
      email: "langworth.eldridge@example.com",
      email_verified_at: "2020-11-12 14:04:33",
      admin_since: "2020-11-12 14:04:33",
      updated_at: "2020-11-12 14:04:33",
      created_at: "2020-11-12 14:04:33",
      id: 3,
    }
 >>> $user->orders()->save(factory(App\Order::class)->make());
 => App\Order {#4055
      status: "paid",
      customer_id: 3,
      updated_at: "2020-11-12 14:07:00",
      created_at: "2020-11-12 14:07:00",
      id: 2,
    }
 >>> $user = App\User::find(3);
 => App\User {#4007
      id: 3,
      name: "Hollie Turner",
      email: "langworth.eldridge@example.com",
      email_verified_at: "2020-11-12 14:04:33",
      admin_since: "2020-11-12 14:04:33",
      created_at: "2020-11-12 14:04:33",
      updated_at: "2020-11-12 14:04:33",
    }
 >>> $user->orders()->get();
 => Illuminate\Database\Eloquent\Collection {#4060
      all: [
        App\Order {#4041
          id: 2,
          status: "paid",
          customer_id: 3,
          created_at: "2020-11-12 14:07:00",
          updated_at: "2020-11-12 14:07:00",
        },
      ],
    }
 >>> $user->orders;
 => Illuminate\Database\Eloquent\Collection {#4036
      all: [
        App\Order {#4052
          id: 2,
          status: "paid",
          customer_id: 3,
          created_at: "2020-11-12 14:07:00",
          updated_at: "2020-11-12 14:07:00",
        },
      ],
    }
 >>> $order = $user->orders()->first();
 => App\Order {#4042
      id: 2,
      status: "paid",
      customer_id: 3,
      created_at: "2020-11-12 14:07:00",
      updated_at: "2020-11-12 14:07:00",
    }
 >>> $order->users;
 => null
 >>> $order->user;
 => App\User {#4039
      id: 3,
      name: "Hollie Turner",
      email: "langworth.eldridge@example.com",
      email_verified_at: "2020-11-12 14:04:33",
      admin_since: "2020-11-12 14:04:33",
      created_at: "2020-11-12 14:04:33",
      updated_at: "2020-11-12 14:04:33",
    }


MANY TO MANY RELATIOSNSHIP
 product and cart
 product and order

 - create pivot table
 -foreign key has to be in pivot table
 -Singular and alphabetical
 -remove the timestamps
 -remove the id
  php artisan make:migration CreateOrderProductTable --create=order_product
  php artisan make:migration CreateCartProductTable --create=cart_product

               $table->bigInteger('order_id')->unsigned();
               $table->bigInteger('product_id')->unsigned();
               $table->integer('quantity')->unsigned();

               $table->foreign('order_id')->references('id')->on('orders');
               $table->foreign('product_id')->references('id')->on('products');

  Relationship
-create a cart
  $cart = factory(App\Cart::class)->create();
-Attach the cart a product
  >>> $cart->products()->attach([1,2]);
  Illuminate/Database/QueryException with message 'SQLSTATE[HY000]: General error: 1364 Field 'quantity' doesn't have a default value (SQL: insert into `cart_product` (`cart_id`, `product_id`) values (1, 1), (1, 2))'
  will fell to avaoid that we need to attach the quantity as well inorder to work

  example

  🌐 >php artisan tinker
  Psy Shell v0.10.4 (PHP 7.4.6 — cli) by Justin Hileman
  >>> $cart = factory(App\Cart::class)->create();
  => App\Cart {#4042
       updated_at: "2020-11-12 16:33:27",
       created_at: "2020-11-12 16:33:27",
       id: 1,
     }
  >>> $cart->products()->attach([1 =>['quantity' => 5], 2=> ['quantity' => 3]]);
  => null
  >>> $cart = App\Cart::dind(1);
  BadMethodCallException with message 'Call to undefined method App/Cart::dind()'
  >>> $cart = App\Cart::find(1);
  => App\Cart {#4055
       id: 1,
       created_at: "2020-11-12 16:33:27",
       updated_at: "2020-11-12 16:33:27",
     }
  >>> $cart->products;
  => Illuminate\Database\Eloquent\Collection {#4060
       all: [
         App\Product {#4063
           id: 1,
           title: "In ut.",
           description: "Temporibus vero fugit accusantium aut libero a.",
           price: 62.66,
           stock: 5,
           status: "unavailable",
           created_at: "2020-11-12 16:32:16",
           updated_at: "2020-11-12 16:32:16",
           pivot: Illuminate\Database\Eloquent\Relations\Pivot {#4040
             cart_id: 1,
             product_id: 1,
             quantity: 5,
           },
         },
         App\Product {#4049
           id: 2,
           title: "Rem a modi.",
           description: "Dignissimos at quaerat consequuntur sed rerum possimus. Quibusdam in pariatur aut.",
           price: 69.26,
           stock: 9,
           status: "available",
           created_at: "2020-11-12 16:32:16",
           updated_at: "2020-11-12 16:32:16",
           pivot: Illuminate\Database\Eloquent\Relations\Pivot {#4062
             cart_id: 1,
             product_id: 2,
             quantity: 3,
           },
         },
       ],
     }
  >>>
access the quantity
  $cart->products()->first()->pivot->quantity;

  RELATIONSHIP  THROUGH RELATIONSHIPS WITH ELOQUENTS

  -Through user we can get direct payment through order

   User Model

   public  function  payments()
   {
       return $this->hasManyThrough(Payment::class, Order::class, 'customer_id');
   }

   Create and access

   Psy Shell v0.10.4 (PHP 7.4.6 — cli) by Justin Hileman
   >>> $user = factory(App\User::class)->create();
   => App\User {#4042
        name: "General O'Reilly",
        email: "xzavier.wunsch@example.org",
        email_verified_at: "2020-11-12 16:52:02",
        admin_since: "2020-11-12 16:52:02",
        updated_at: "2020-11-12 16:52:02",
        created_at: "2020-11-12 16:52:02",
        id: 1,
      }
   >>> $user->orders()->save(factory(App\Order::class)->make());
   => App\Order {#4054
        status: "paid",
        customer_id: 1,
        updated_at: "2020-11-12 16:53:14",
        created_at: "2020-11-12 16:53:14",
        id: 1,
      }
   >>>

Assigned the payments

>>> $order->payment()->save(factory(App\Payment::class)->make());
=> App\Payment {#4063
     amount: 59.94,
     payed_at: "2020-07-10 03:00:18",
     order_id: 2,
     updated_at: "2020-11-12 16:56:20",
     created_at: "2020-11-12 16:56:20",
     id: 1,
   }
>>> $payment = $order->payment()->save(factory(App\Payment::class)->make());
  => App\Payment {#4055
       amount: 459.18,
       payed_at: "2020-11-09 01:24:37",
       order_id: 2,
       updated_at: "2020-11-12 16:58:01",
       created_at: "2020-11-12 16:58:01",
       id: 2,
     }

>>$user->orders;

>>$user->orders()->find(3);

>>> $user->orders()->find(2)->payment;
=> App\Payment {#4044
     id: 1,
     amount: 59.94,
     payed_at: "2020-07-10 03:00:18",
     order_id: 2,
     created_at: "2020-11-12 16:56:20",
     updated_at: "2020-11-12 16:56:20",
   }
>>$user->payments;  return the collection of payments

POLYMORPHIC RELATIONSHIP
 -One to One Polymorphic relationships
    Image can belongs to user or products
    image and user 1:1
      image migration
        $table->morphs('imageables');
            - imageables_type
             -imageables_id

Image Model
   public  function  imageable()
      {
          return $this->morphTo();
      }

User Model


public function  image()
{
    return $this->morphOne(Image::class, 'imageable');
}

Create  a user
 $user= factory(App\User::class)->create();

 Assign an image to user
 $image = $user->image()->save(factory(App\Image::class)->states('user')->make());

 $image->imageable;



 ONE TO MANY POLYMORPHIC
   - Products and Image

    public  function  images()
       {
           return $this->morphMany(Image::class,'imageable');
       }

Find the Product

$product = App\Product::find(2);

Assign image to product
$images = $product->images()->saveMany(factory(App\Image::class,10)->make());
$product->images;

Find the image id 2
$image1 = App\Image::find(2);
$image1->imageable;

resolove of instance of product or user
image can belongs to proucts or user

MANY TO MANY POLYMORPHIC RELATIONSHIP

-Between Product and Cart
-Between Product and Order

Many to Many relation we're kind of repeating ourselves ,to resolve that problem we can remove
 the order-product migration , one can manage all
 -change the name of migration to productables  and it should in plural
 -change the name of the tables productables
 -Cardinality is very important


 Order Model
  return $this->morphToMany(Product::class, 'productable')->withPivot('quantity');
 Cart Model
 return $this->morphToMany(Product::class, 'productable')->withPivot('quantity');
 Product Model
  return $this->morphedByMany(Cart::class, 'productable')->withPivot('quantity'); //carts()
  return $this->morphedByMany(Cart::class, 'productable')->withPivot('quantity'); //orders()
 -Because product belongs to cart and order - m-m  laravel cannot figured out
 -use morphedByMany

 Tinker many - many
  Order and product

  - create user inorder to create an order
     >>> $user = factory(App\User::class)->create();
     => App\User {#4042
          name: "Alberta Cremin Sr.",
          email: "stoltenberg.kailee@example.org",
          email_verified_at: "2020-11-13 10:40:14",
          admin_since: null,
          updated_at: "2020-11-13 10:40:14",
          created_at: "2020-11-13 10:40:14",
          id: 1,
        }
- create an order through relationship
  >>> $order = $user->orders()->save(factory(App\Order::class)->make());
  => App\Order {#4038
       status: "paid",
       customer_id: 1,
       updated_at: "2020-11-13 10:44:27",
       created_at: "2020-11-13 10:44:27",
       id: 1,
     }
  >>>

  -attach the product to this specific order
  $order->products()->attach([4 => ['quantity'=>7], 9 =>['quantity'=>3]]);

  - Get a product
  $order->products;

  >>> $order->products;
  => Illuminate\Database\Eloquent\Collection {#4042
       all: [
         App\Product {#4007
           id: 4,
           title: "Hic voluptas explicabo.",
           description: "Et debitis ipsam consequuntur eveniet inventore et.",
           price: 64.01,
           stock: 1,
           status: "unavailable",
           created_at: "2020-11-13 11:08:16",
           updated_at: "2020-11-13 11:08:16",
           pivot: Illuminate\Database\Eloquent\Relations\MorphPivot {#4043
             productable_id: 1,
             product_id: 4,
             productable_type: "App\Order",
             quantity: 7,
           },
         },


INSERTING SIMPLE MODEL VIA RELATIONSHIP USING DATABASE SEEDER
  -
  $products   = factory(Product::class, 50)->create();
          $users      = factory(User::class, 20)->create(); //$users = User::factory(20)->create();

          $orders     = factory(Order::class, 10) //$orders = Order::factory(10)
                      ->make()
                      ->each(function ($order) use ($users){
                          //associate oreder to one user
                          $order->customer_id  = $users->random()->id;
                          $order->save();

            //assocaite new payment - one payment with each

            $payment = factory(Payment::class)->make();     // $payment = Payment::factory()->make();
                  $order->payment()->save($payment);
                  //$payment->order_id  = $order->id;
                  //$payment->save();

example
  -To obtained the full list of user
     $users = App\User::all();
     $orders = App\Order::all();
    $payments = App\Payment::all();
    $order = App\Order::first();

    Obtain the payment through an order

    >>> $order -> payment
    => App\Payment {#4031
         id: 1,
         amount: 435.08,
         payed_at: "2020-07-18 23:32:59",
         order_id: 1,
         created_at: "2020-11-13 11:56:03",
         updated_at: "2020-11-13 11:56:03",
       }

  Obtain the user via Order
   >>> $order -> user;
   => App\User {#4020
        id: 20,
        name: "Mallie Glover",
        email: "welch.queenie@example.com",
        email_verified_at: "2020-11-13 11:56:03",
        admin_since: null,
        created_at: "2020-11-13 11:56:03",
        updated_at: "2020-11-13 11:56:03",
      }
INSERTING POLYMORPHIC RELATIONSHIP USING SEEDER
-Complex one
-two type of different polymorphic relationshi
-product-Order Order may have several produce  M:M polymorphic
-Product-Cart   Cart may have several produce  M:M polymorphic
-Product-Image     Product can have many image 1:M polymorphic
-User-Image       User can have one image      1:1 polymorphic

  SET OF IMAGE
   >>> $image = App\Image::all();
   App\Image {#4552
           id: 166,
           path: "img/products/9jpg",
           created_at: "2020-11-16 19:33:38",
           updated_at: "2020-11-16 19:33:38",
           imageable_type: "App\Product",
           imageable_id: 50,
         },
       ],
     }


FIND PRODUCT WITH ID 2

>>> $product = App\Product :: find(2);
=> App\Product {#4223
     id: 2,
     title: "Nulla non nam neque est.",
     description: "Est excepturi quis dolorem autem suscipit.",
     price: 67.13,
     stock: 4,
     status: "unavailable",
     created_at: "2020-11-16 19:33:38",
     updated_at: "2020-11-16 19:33:38",
   }

OBTAIN THE SET OF IMAGE

$product->images;
=> Illuminate\Database\Eloquent\Collection {#4229
     all: [
       App\Image {#4225
         id: 25,
         path: "img/products/2jpg",
         created_at: "2020-11-16 19:33:38",
         updated_at: "2020-11-16 19:33:38",
         imageable_type: "App\Product",
         imageable_id: 2,
       },
       App\Image {#4233
         id: 26,
         path: "img/products/2jpg",
         created_at: "2020-11-16 19:33:38",
         updated_at: "2020-11-16 19:33:38",
         imageable_type: "App\Product",
         imageable_id: 2,
       },
     ],
   }

   OBTAIN THE SET OF CART
   >>> $product->carts;
   => Illuminate\Database\Eloquent\Collection {#4207
        all: [
          App\Cart {#4235
            id: 20,
            created_at: "2020-11-16 19:33:38",
            updated_at: "2020-11-16 19:33:38",
            pivot: Illuminate\Database\Eloquent\Relations\MorphPivot {#4228
              product_id: 2,
              productable_id: 20,
              productable_type: "App\Cart",
              quantity: 2,
            },
          },
        ],
      }

OBTAIN THE SET OF ORDERS
>>> $product->orders;
=> Illuminate\Database\Eloquent\Collection {#4217
     all: [
       App\Order {#4238
         id: 3,
         status: "pending",
         customer_id: 6,
         created_at: "2020-11-16 19:33:37",
         updated_at: "2020-11-16 19:33:37",
         pivot: Illuminate\Database\Eloquent\Relations\MorphPivot {#4245
           product_id: 2,
           productable_id: 3,
           productable_type: "App\Order",
           quantity: 2,
         },
       },
     ],
   }
 The legacy version of the Laravel Eloquent factories
   composer require laravel/legacy-factories


ELOQUENT SCOPES TO IMPROVE VISUALIZATION
-show the product if the status is available
-Scopes allow you to easily re-use query logic in your models
-Function to our model
-allow to apply some restriction,query logic  we can utilize to all project
-Two types of scopes
    logic
    local   https://laravel.com/docs/8.x/eloquent
    - within the controller  we can use the method available();
    -in the product model we can use ScopeAvailable($query)
    -If my boss ask me to change the available i can do eg 1


 Error : Image not showing via <
        img  class="card-img-top" src="{{ asset( $product->images->first()->path )}}" alt="" height="500">
 Solution :



USE NESTED RESOURCE IN LARAVEL TO  PRODUCT TO A CART
  -Add prooduct to cart , user will click the button on the product to be able to add into a cart
  -we need to build a form  to be able to add a cart
  -existing product to existing cart
  -Identify the cart
  -we going to use the resource nested controller class
  -parent must be present all the time
    php artisan make:controller ProductCartController --parent=Product --model=cart
    -store() method
    -destroy() method
  -create a set route must be in plural
     eg Route::Resource('products.carts','ProductCartController')->only(['store','destroy']);
-when the user click add to cart will be showing the quantity 1 ,2  etc for every single product
-Every product will have  quantity once click add to cart


LEARN OUR TO USE COOKIES TO RETRIEVE THE SHOPPING CART
  -To resolve the current cart the user may be able to use
  -if the cookie exist we can resolve otherwise will be creating a cart
  -If the user remove the cookies ,the cart will be lost
  -we get an id from the cookie
  -Use Facades cookie
  -we need to return the cookie in the resources
  -attach ,
     sync  adding the new element and removing  , syncWithoutDetaching

USE DEPENDENCY INJECTION IN LARAVEL TO DISPLAY THE  PRODUCTS OF A CARTS
  -User as to have the way to view the cart
  -Dependecy injection
  -link to show the cart in app layouts
  - routes of carts in web route only index
  -create a cartControler  and resolve the cart from the cookie
  -instead of copying the getFromCookieOrCreate and paste to cart controller
  -we can create a service provider in app, allow to resolve
     App\Service\CartService.php
- - we can remove  getFromCookieOrCreate()  and paste into service file
  -we can use the service we created to our controller
  - we going to use the dependency Injection in ProductController
  -create a carts index
  -obtain the product from the carts
     show the cart is empty and if not show the product
     https://ecommerce-portifolio.test/carts
 -SERVICE HELP US NOT REPEAT THE CODE .



 TAKE ADVANTAGE OF THE SERVICE TO REMOVE THE CART PRODUCTS WITH LARAVEL
 -remove the cart from cookie in cartproduct controller
 -let add if condition in the product cart components
 -create a form  to remove the cart from products
 -Put and else
 -resolve the cookie
 creating the cookie should be responsibility of cart service
 -we just remove the relationship (pivot table) in the cart and not product itself


USING LARAVEL COLLECTIONS AND USE IT TO INJECT THE CART COUNTER IN BLADE
 -Cart link - show the counter
 -app layout  @inject('cartService, 'App\Services\CartService') to every single view
 - use inject method from laravel, laravel throw blade
 -use collection in the cart
   https://laravel.com/docs/8.x/collections
     sum and plunk
-change the method from the cartController to be getfromcookie()
- we need to add the condition in the cart index
    ! isset($cart)
- Application -cookies- delete from there


ORDER

RECALL SOME LARAVEL FEATURE TO CONFIRM AND INITIATE AN  ORDER
- Press cart to make order
-link in cart
    <a  class=" btn btn-sucess mb-3" href="{{ route('orders.create') }}">Start Order</a>
- create two methods create and store
-To send the products which are currently in the carts not in the order
-we obtained cart from the cookie
-Show order details
-->total = product * quantity via pivot table
-problem of showing an images


LEARN ACCESSORS IN LARAVEL AND USE IT TO CALCULATE TOTALS

-Through the cart and products via collections
 -GET /ASSESSOR
 Accessors and mutators allow you to format Eloquent attribute values when you retrieve or set them on model instances.
 -done in model directly and call the method in the view
 -adding every products into the cart via plunk in car model
 - we can do in the order model as we did  in product
 -Cart ->index.php  <h4 class="text-center">Your Cart Total:  <strong>{{   $cart->total}}</strong></h4>
 -in component we're going to show the quantity of product in the cart and total of specific product
   <p class="card-text">{{ $product->pivot->quantity }}<strong>{{ $product->total}} </strong></p>


   IDENTIFY AUTHENTICATED USERS AND CREATE AN ORRDER
   -Take the products in the cart and attach to new order which we're going to created
   -Once the user has confirmed
   -How? To create a button the  order create view
   -Will send the post request in the order create view blade
   -Store in Order Controller and customer_id in order moderl is an instance of the user
   -Identify the user via session
   -Middleware to authenticate the user
   -Store and create need an authenticated user
   -Once the user click start -> need an authenticate user inorder to procede the order
   -STORE controller we can ge the user
      $user =  $request->user();
              dd($user);
   -we know is the user we want then we can order
   -obtain cart from the cookie
   -obtain the products via collection via map()
   -function will receive every single produce
   -attach the key to a specific order via mapKeys
   -to turn the collection to array



   USE A LARAVEL NESTED RESOURCE CONTROLLER TO CHARGE FOR AN ORDER
   -associate and create payment to an order
   -insert the payment to specific order
   -nested controller
     php artisan make:controller OrderPaymentController --parent=Order --model=Payment
   -create a payment view
   -Display the grand total via order
   -User click Pay Button ,will go on store message
   -remove the element from the cart once the payment is successful via cartService and inject the middlEware auth
   -The message with show ob view to say thank you.


   SEPARATING  THE ROUTES FROM THE ADMIN PANEL IN LARAVEL
   - separate  the routes
   -dublicate the web file to panel file
   -remove the  proucts route and put in the panel
        Route::Resource('products','ProductController');
  -We need to tell the laravel what to do with panel
  -we need to create a mapPanelRoutes() in the providers-> RoutesServiceProvider
  -Move our productController to Panel Folder after created
  -Add a new namespace Panal; namespace App\Http\Controllers\Panel;
  -we need to import the defination of controller bse different location
     use App\Http\Controllers\Controller;

- Try to access the product ,404 error page  soln https://ecommerce-portifolio.test/panel/products

DETERMINING IF A USER IS AN ADMINISTRATOR USING THE MODEL AND carbon
-To check if the specific user is admin  in model (USER)
 App\User::all();
 App\User::find(20);
 $user = App\User::find(22);
 $user->isAdmin();
 $user->fill(['admin_since'=> now()->addYear(5)]);
 $user->forcefill(['admin_since'=> now()->addYear(5)]);
 $user->save()


CREATE YOUR OWN MIDDLEWARE INB LARAVEL TO CONTROL ADMINISTRATIVE ACESSS
  - validdation and action
  -create a new middlware
    php artisan make:middleware checkIfAdmin
 -All middleware have handle method
 -in the panel - middleware was added is.admin
 -we need to register the middleware in the kernel


IMPLEMENT THE MAIN ADMIN PANEL ACTION WITH LARAVEL
 - app layout product route
     <li class="nav-item">
         <a class="nav-link" href="{{ route('products.index') }}">Products</a>
     </li>
  -Put the condition  to check if is an admin
  -admin user can manage alot in the future
  -create a panel controller inside the panel folder
  -php artisan make:controller Panel\\PanelController
  -created a view to display all the products in the admin section only for authenticated user.

        ADVANCED FEATURE
  USING ELOQUENT GLOBAL SCOPES TO GET ONLY AVAILABLE PRODUCTS
  -global scope
  - was was able to add a product ,only global scope
  -Deal only with available products
    https://laravel.com/docs/8.x/eloquent#global-scopes
    -scope is a class which has apply method w/c has query builder and model
    -We tell laravel to use a scope in booted method in our model
    -Going to create a global scope in app folder
    -apply a new constraints/restriction
    -Product model must have a scope called available
    -we need a booted method  in product model -booted called automatically with frameworks
    -In productController we need to pass our $products = Product::withoutGlobalScope(AvailableScope::class);
    -we need to get the result to our query in productController get();
    -Some little issue in product view when admin click edit 404 error appeared
    -scope was available in admin side which is not right

  IGNORING THE GLOBAL SCOPES IN THE ADMIN PANEL WITH LARAVEL
   - Resolve 404 error
   -show the available product
   -Model should take care of crud ,to create another model
   -create an inheritance
      php artisan make:model PanelProduct will extends Product
  -once it has been extended will have capabilty to access protected and public all method
  -we are going to inject the PanelProduct instead of Product  PanelProduct
  -in the index we're going to usr PanelProduct::all instead of Product::withoutGlobalScope(AvailableScope::class);
  -Add the PanelProduct to store ,edit show  update and destroy
  -When you try to access the page  u get the following error,why laravel is trying to access the panel_table
      SQLSTATE[42S02]: Base table or view not found: 1146 Table 'ecommerce-portifolio.panel_products' doesn't exist (SQL: select * from `panel_products`)
  -Solution within the PanelProduct you can add protected table protected  $table = 'products';
  -Or you can specify in base model   w/c is Product model


  USE EAGER LOADING IN LARAVEL TO LOAD PRODUCT IMAGE EFFICIENTLY
  -Eager Loading
  - to resolve the efficiency of our database
  -There's a problem of N+1 query , 1000 products will be 1000 + 1
  - Main Controller  on index()
   $products = Product::with('images')->get(); This can be done in better way by moving this product model
        protected  $with =['images' ];
   -
  -two query , obtain the list product and second is list images  related the all list of product 27 id of products
  -ProductController $products = PanelProduct::without('images')->get();

  SHOWING THE LOADING IMAGES OF EACH PRODUCT WITH LARAVEL AND BOOTSTRAP
    -we're going to show the images by using bootstrap
    -Inside the components  in product-card  we can put carousel
    -Every single carousel has single id
    -loop the set of images in components
    -add the control to show the prev and next in product-card blade
    -The images not showing up

  USE DATABASE TRANSACTIONS IN LARAVEL FOR COMPLEX OPERATIONS
   -preserve data consistency in database structure
   -orderPaymentController or OrderPayment Controller these controllers are performing inserting data in database
   -creating a payment associating the payment to the order
   -Updating the order status
   -If something fail when processing the payment ,preserve the orignal
   -Every thing will be ignored  eg order
    DB::transaction(function () use($request) {  //OrderController

    });

 -  we need to pass request DB::transaction(function () use($request)

 -To be done in OrderPaymentController in the store method
    return  DB::transaction(function () use($request,  $order){

  });

  REDIRECTING USERS TO THE CORRECT LOCATION AFTER LOGIN
    -remove the home route in web
    -we need to the change the location after the user has login or register or
        an incorrect location
   LoginController
   -RouteServiceProvider - public const HOME = '/home'; change this into root path '/'
   -Try to access login again 127.0.0.1:8000/login it redirect to original path
   -Check in the RedirectIfAuthenticate Middleware

  CREATE YOUR OWN CONFIGURATION FILE FOR THE CART SERVICE
   -quality of code and maintainability of my code
       config ,env database
   -configurable value to our application
   -In the CartService we have cookie name and expiration time
   -Now we need to create a file in config and call cart.php
   -Return the an array
   - add CART_COOKIE_NAME = cart to cart.php plus in  env and example env file
   -In the cartService file you can add constructor which takes two  parameters
   -Access via tinker
     $service =  resolve(App\Services\CartService::class);
     => App\Services\CartService {#4232}
     >>>

     🌐 >php artisan tinker
     Psy Shell v0.10.4 (PHP 7.4.6 — cli) by Justin Hileman
     >>> $service =  resolve(App\Services\CartService::class);
     => App\Services\CartService {#4222}
     >>> $cookie = $service->makeCookie(App\Cart::find(1));
     => Symfony\Component\HttpFoundation\Cookie {#4218}
     >>> $cookie->getName();
     => "cart"
     >>> $cookie->getExpiresTime();
     => 0
     >>> $cookie = $service->makeCookie(App\Cart::find(10));
     => Symfony\Component\HttpFoundation\Cookie {#4236}
     >>> $cookie->getName();
     => "cart"
     >>> $cookie->getExpiresTime();
     => 0
     >>> date(DATE_ATOM , $cookie->getExpiresTime());
     => "1970-01-01T00:00:00+00:00"
     >>>

  MANAGING THE STOCK OF PURCHASES PRODUCTS
  -ProductCartController store()
 - reduce the stock of quantity after it has been added to specific order
 -Reduce the quantity of order once the user has added the product into the cart
    example  2Product ->add to cart 1
 if ($product->stock < $quantity + 1){
     throw  validationException::withMessages([
         'cart' => "There  is not enough stock for the quantity you required of { $product->title}"
     ]);
 }
 - create the instance of illumination and message
 - We need to the reduce the quantity of available product  in the orderController
 -reduce the quantity available for that product
 -Example if two user are trying to buy the same product the will get the message out of stock
 -The product will show 0 .Mean no stock available

HANDLING USER'S ACTIONS AND THEIR PROFILES
VERIFYING A USER EMAIL AFTER REGISTERING
-Sent an email after registering to user
-Verify the email and the account
-VerificationController
    -VerifiesEmails vendor/laravel/ui/auth-backend/VerifiesEmails.php
-config  -> mail.php
- we're going to use log file
-set a env and example.php
-VerificationController
-web route routes()  v/l/frameworks/src/illuminate/Support/Facades/Auth
                    routes.> v/lar/ui/src/UiServiceProvider.php
                            ->v/lar/ui/src/AuthRouteMethods.php
-prepare our user model  add implements  MustVerifyEmail  (Inteface)
   v/l/f/src/i/Contracts/Auth/MustVerifyEmail.php
-User table has the attribute email_verified_at

USING ROUTE MIDDLEWARE IN LARAVEL TO ALLOW ACTIONS ONLY TO VERIFIED USERS
 -Only for verified user
 -Apply the middleware to set some action of application
 -RouteServiceRoute  mapPanelRoutes ->middleware(['web', 'auth' ,'is.admin','verified'])
 -we need to restrict for ordering and paying user
 -within the web route we can add a middleware
      ->middleware(['verified']);
-

HOW WORKS PASSWORD RESET FEATURES OF LARAVEL
  recover the forgotten passwod from the user
ALLOWING TO EDIT THE USER'S PROFILE WITH LARAVEL
 -route
 -controller
 -View
  php artisan make:controller  ProfileController
  -Authenticated user  , access the profile
     -created a profile edit view and copy the register file and paste
      -Add a link in app file.
      -add ?? $user->name  , email and remove required in password and confirmed
      -enctype="multipart/form-data" add in the form inorder to send  the image

EDITING A USER'S PROFILE WITH LARAVEL
   -validate all input
   -we need to check the email is validated
   -Password must be encrypted in the ProfileController or better way in User Model
         if ($request->has('password')){
             $user->password = bcrypt($request->password);
         }
 -to disable the password in the registered controller
 -Validate our input php artisan make:request ProfileRequest
 -Pass the request in the ProfileController

RECEIVING AND HANDLING FILES IN LARAVEL USER'S PROFILE IMAGE
 -Detach and store the new one
  file upload via laravel
-File Storage in filesystem file laravel
-STORE in local
-removing the existing image and create a new image  in profilecontroller

USING AND SHOWING THE PROFILE IMAGE STORED FOR THE USER'S PROFILE
 -Show the image in user interface UI
 -Show the image associated with the User
 -on profile
 -Modify the app
 -the image of the user who has been authenticated
 Trying to get property 'path' of non-object ERROR
     <img src="{{ asset('images/' . Auth::user()->image->path) }}"
     WHAT HAPPEN IF THE USER DOESN'T HAVE AN IMAGE?
     The above code will cause alot of problem ,the better way
      OR
    src="{{ asset(Auth::user()->profile_image) }}"

    we need to create an attribute from the User model to get an assessor
     public  function  getProfileImageAttribute()
         {
             return $this->image ?
                 "/images/{ $this->image->path}"
                 : 'https://www.gravatar.com/avatar/404?d=mp';
             //return "images/{$this->image->path}";
         }































































































































































































































$






























































































































































































































































































































































































