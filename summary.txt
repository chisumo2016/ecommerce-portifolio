Factory : Random instance of factory, return the attributes
- Read from github
  php artisan make:factory ProductFactory --model=Product


    php artisan tinker
    factory(App\Product::class)->create();
    factory(App\Product::class)->make();


2: Table Seeder
     -databaseSeeder
        $products = factory(Product::class, 50)->create();



QUERY BUILDER

        //$product =DB::table('products')->where('id', $product)->get();
        //$product =DB::table('products')->where('id', $product)->first();
        $product =DB::table('products')->find($product);
        dd($product);

ORM
   //$product =Product::where('id', $product)->get();
   //$product =Product::where('id', $product)->first();
    $product =Product::find($product);

    dd(request, request->title, request->all());

  Laravel UI

  composer require laravel/ui

  Authenticated system
    Login
    Register
    Logout

    Laravel Mix  to Generate the Frontend Assests

     Compser Json
     package jSON
     WEBPACK JSON
  npm install && npm run dev

Middleware and How to restrict access and actions in laravel
  Middleware - control the specific  to access
      localhost/product/create   we can restrict some access
          http- kernel
          call handle method - authenticated the user
           public function __construct()
               {
                   $this->middleware('auth')->only(['index', 'show']);
               }

                public function __construct()
                   {
                       $this->middleware('auth')->except(['index', 'show']);
                   }


Using Implicit Model Binding In Laravel
   inject to me or bind to this method of an instance of any model
   Done automatically
   Route::get('products/{product}','ProductController@show')->name('products.show');
   Route::get('products/{product:title}','ProductController@show')->name('products.show');
   public  function show(Product  $product)


Resource Routes in Laravel
 -Handle specific model
 -Route::Resource();
 -Plular
 -Nama


 Form Request  to validate Data
   Form request  in a single class
    php artisan make:request  ProductRequest
    return true
    withvalidator
    $product = Product::create($request->all());   better way is -which validate the input
    $product = Product::create($request->validate());

 Using Artisan to create Multiple Components at Once
   Make sure you follow the order based on foreign key
   order table must be existed before you create payment table
   user table must be existed before you create order table

   ORDER TO CREATE
   user
   product
   image
   cart
   order
   payment

php artisan make:model --help
php artisan make:model  Image -a

 Payment       Product          Order           Image          user                     Cart
 id             id              id              id              id                      id
 amount         title           status          path            name                    created_at
 payed_at       description     customer_id     created_at      email                   updated_at
 order_id       price           created_at      updated_at      email_verified_at
 created_at     stock           updated_at                      password
 updated_at     status                                          remember_token
                created_at                                      admin_since
                updated_at                                      created_at
                                                                updated_at

Layouts and components  with laravel blade
  -show the link to handle the product in layouts app
  -show the list of product in main/welcome view
  -Introduce the component in blade by creating a components folder and extends to blade


  Indicating the Columns of the tables in the migrations
     $table->timestamp('admin_since')->nullable();

     Implementing the Additional Model
       Mass Assigements to each model
       PHP Carbon

Implemented the Factories to the Models
 - use faker
 - Image belongs to product and user
 - save for product
 - save for user
 -factory(App\Cart::class)->create();  $instance = App\Cart::factory()->create();
 -factory(App\Payment::class)->create();  $instance = App\Cart::factory()->create();
 -factory(App\Image::class)->create();   $instance = App\Cart::factory()->user()->create();


 RELATIONSHIP

php artsian tinker
>>$cart = factory (App\Cart::class)->create();   -- Laravel 7.4.6 but laravel 8 will throw an error
PHP Fatal Error : call to undefined function factory() in Psy Shell code on line 1 after laravel 8
>>$cart = App\Cart::factory(6)->create();
>>$cart = App\Cart::factory(6)->create(['user_id'=> $user->id]);
>>App\Model::factory();

ONE TO ONE RELATIONSHIP MODEL / TABLE

PAYMENT - ORDER  Payment belongs to an order
  $table->bigInteger('order_id')->unsigned();

  example

        Schema::create('payments', function (Blueprint $table) {
            $table->id();
            $table->float('amount')->unsigned();
            $table->timestamp('payed_at')->nullable();
            $table->bigInteger('order_id')->unsigned();
            $table->timestamps();

            $table->foreign('order_id')->references('id')->on('orders');
        });

        Model Payment

      public  function  order()
         {
             return $this->belongsTo(Order::class);
         }

        public  function  payment()
          {
              return $this->hasOne(Payment::class);
          }

          remember to add mass assigment

          $payment = factory(App\Payment::class)->make(); will not store in database

          >>> $payment = factory(App\Payment::class)->create();
          Illuminate/Database/QueryException with message 'SQLSTATE[HY000]: General error: 1364 Field 'order_id' doesn't have a default value (SQL: insert into `payments` (`amount`, `payed_at`, `updated_at`, `created_at`) values (344.77, 2020-09-08 05:06:04, 2020-11-12 13:03:06, 2020-11-12 13:03:06))'
          This because of foreign key

          We need to create an order first then payment to be able to persist data in the database

         >>> $order = factory(App\Order::class)->create();
         => App\Order {#4041
              status: "paid",
              updated_at: "2020-11-12 13:09:34",
              created_at: "2020-11-12 13:09:34",
              id: 1,
            }

         $payment = factory(App\Payment::class)->create(['order_id'=> 1]); but the better way

          $payment = App\Payment::create(['amount'=>200 , 'payed_at'=>now(), 'order_id'=>2]);

         App\Payment::all();

         using the relationship
         $payment = $order->payment()->save(factory(App\Payment::class)->make());

         Find the Order via relationship

         $order = App\Order::find(1);

         To obtained the Payment through relationship
         $order->payment;

          $order->payment()->get();  query builder

          Inverse
       >>> $payment = App\Payment::find(2);
          >$payment->order;

    ONE TO MANY RELATIONSHIP ELOQUENT
      -Order and User
      -An order must belongs to user  bse of that Order has the foreign key
      -User can have multiple Order
      example
       Schema::create('orders', function (Blueprint $table) {
                   $table->id();
                   $table->string('status')->default('pending');
                   $table->bigInteger('user_id')->unsigned();
                   $table->timestamps();

                   $table->foreign('customer_id')->references('id')->on('users');
               });
   order
    public function  user()
       {
           return $this->belongsTo(User::class, 'customer_id');
       }

   user

   public  function  orders()
   {
      return $this->hasMany(Order::class, 'customer_id') ;
   }

   Tinker to create a user
     $user = factory(App\User::class)->create();

  Let associate the user with an order

  >>> $user->orders()->save(factory(App\Order::class)->make());

  Search the user with ID 1
   $user = App\User::find(1);

   BE CAREFUL
 >>> $user->orders();
 => Illuminate\Database\Eloquent\Relations\HasMany {#4034}

USE  - COLLECTION OF ORDERS
$user->orders;
$order = $user->orders()->first();

>>> $user = factory(App\User::class)->create();
=> App\User {#4037
     name: "Hollie Turner",
     email: "langworth.eldridge@example.com",
     email_verified_at: "2020-11-12 14:04:33",
     admin_since: "2020-11-12 14:04:33",
     updated_at: "2020-11-12 14:04:33",
     created_at: "2020-11-12 14:04:33",
     id: 3,
   }
>>> $user->orders()->save(factory(App\Order::class)->make());
=> App\Order {#4055
     status: "paid",
     customer_id: 3,
     updated_at: "2020-11-12 14:07:00",
     created_at: "2020-11-12 14:07:00",
     id: 2,
   }

 EXAMPLE 2

  >php artisan tinker
 Psy Shell v0.10.4 (PHP 7.4.6 — cli) by Justin Hileman
 >>> $user = factory(App\User::class)->create;
 PHP Notice:  Undefined property: Illuminate/Database/Eloquent/FactoryBuilder::$create in /Users/os/Documents/projects/ecommerce-portifolioeval()'d code on line 1
 => null
 >>> $user = factory(App\User::class)->create();
 => App\User {#4037
      name: "Hollie Turner",
      email: "langworth.eldridge@example.com",
      email_verified_at: "2020-11-12 14:04:33",
      admin_since: "2020-11-12 14:04:33",
      updated_at: "2020-11-12 14:04:33",
      created_at: "2020-11-12 14:04:33",
      id: 3,
    }
 >>> $user->orders()->save(factory(App\Order::class)->make());
 => App\Order {#4055
      status: "paid",
      customer_id: 3,
      updated_at: "2020-11-12 14:07:00",
      created_at: "2020-11-12 14:07:00",
      id: 2,
    }
 >>> $user = App\User::find(3);
 => App\User {#4007
      id: 3,
      name: "Hollie Turner",
      email: "langworth.eldridge@example.com",
      email_verified_at: "2020-11-12 14:04:33",
      admin_since: "2020-11-12 14:04:33",
      created_at: "2020-11-12 14:04:33",
      updated_at: "2020-11-12 14:04:33",
    }
 >>> $user->orders()->get();
 => Illuminate\Database\Eloquent\Collection {#4060
      all: [
        App\Order {#4041
          id: 2,
          status: "paid",
          customer_id: 3,
          created_at: "2020-11-12 14:07:00",
          updated_at: "2020-11-12 14:07:00",
        },
      ],
    }
 >>> $user->orders;
 => Illuminate\Database\Eloquent\Collection {#4036
      all: [
        App\Order {#4052
          id: 2,
          status: "paid",
          customer_id: 3,
          created_at: "2020-11-12 14:07:00",
          updated_at: "2020-11-12 14:07:00",
        },
      ],
    }
 >>> $order = $user->orders()->first();
 => App\Order {#4042
      id: 2,
      status: "paid",
      customer_id: 3,
      created_at: "2020-11-12 14:07:00",
      updated_at: "2020-11-12 14:07:00",
    }
 >>> $order->users;
 => null
 >>> $order->user;
 => App\User {#4039
      id: 3,
      name: "Hollie Turner",
      email: "langworth.eldridge@example.com",
      email_verified_at: "2020-11-12 14:04:33",
      admin_since: "2020-11-12 14:04:33",
      created_at: "2020-11-12 14:04:33",
      updated_at: "2020-11-12 14:04:33",
    }


MANY TO MANY RELATIOSNSHIP
 product and cart
 product and order

 - create pivot table
 -foreign key has to be in pivot table
 -Singular and alphabetical
 -remove the timestamps
 -remove the id
  php artisan make:migration CreateOrderProductTable --create=order_product
  php artisan make:migration CreateCartProductTable --create=cart_product

               $table->bigInteger('order_id')->unsigned();
               $table->bigInteger('product_id')->unsigned();
               $table->integer('quantity')->unsigned();

               $table->foreign('order_id')->references('id')->on('orders');
               $table->foreign('product_id')->references('id')->on('products');

  Relationship
-create a cart
  $cart = factory(App\Cart::class)->create();
-Attach the cart a product
  >>> $cart->products()->attach([1,2]);
  Illuminate/Database/QueryException with message 'SQLSTATE[HY000]: General error: 1364 Field 'quantity' doesn't have a default value (SQL: insert into `cart_product` (`cart_id`, `product_id`) values (1, 1), (1, 2))'
  will fell to avaoid that we need to attach the quantity as well inorder to work

  example

  🌐 >php artisan tinker
  Psy Shell v0.10.4 (PHP 7.4.6 — cli) by Justin Hileman
  >>> $cart = factory(App\Cart::class)->create();
  => App\Cart {#4042
       updated_at: "2020-11-12 16:33:27",
       created_at: "2020-11-12 16:33:27",
       id: 1,
     }
  >>> $cart->products()->attach([1 =>['quantity' => 5], 2=> ['quantity' => 3]]);
  => null
  >>> $cart = App\Cart::dind(1);
  BadMethodCallException with message 'Call to undefined method App/Cart::dind()'
  >>> $cart = App\Cart::find(1);
  => App\Cart {#4055
       id: 1,
       created_at: "2020-11-12 16:33:27",
       updated_at: "2020-11-12 16:33:27",
     }
  >>> $cart->products;
  => Illuminate\Database\Eloquent\Collection {#4060
       all: [
         App\Product {#4063
           id: 1,
           title: "In ut.",
           description: "Temporibus vero fugit accusantium aut libero a.",
           price: 62.66,
           stock: 5,
           status: "unavailable",
           created_at: "2020-11-12 16:32:16",
           updated_at: "2020-11-12 16:32:16",
           pivot: Illuminate\Database\Eloquent\Relations\Pivot {#4040
             cart_id: 1,
             product_id: 1,
             quantity: 5,
           },
         },
         App\Product {#4049
           id: 2,
           title: "Rem a modi.",
           description: "Dignissimos at quaerat consequuntur sed rerum possimus. Quibusdam in pariatur aut.",
           price: 69.26,
           stock: 9,
           status: "available",
           created_at: "2020-11-12 16:32:16",
           updated_at: "2020-11-12 16:32:16",
           pivot: Illuminate\Database\Eloquent\Relations\Pivot {#4062
             cart_id: 1,
             product_id: 2,
             quantity: 3,
           },
         },
       ],
     }
  >>>

  $cart->products()->first()->pivot->quantity;


















































































































































































































































































































