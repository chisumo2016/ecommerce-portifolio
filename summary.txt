Factory : Random instance of factory, return the attributes
- Read from github
  php artisan make:factory ProductFactory --model=Product


    php artisan tinker
    factory(App\Product::class)->create();
    factory(App\Product::class)->make();


2: Table Seeder
     -databaseSeeder
        $products = factory(Product::class, 50)->create();



QUERY BUILDER

        //$product =DB::table('products')->where('id', $product)->get();
        //$product =DB::table('products')->where('id', $product)->first();
        $product =DB::table('products')->find($product);
        dd($product);

ORM
   //$product =Product::where('id', $product)->get();
   //$product =Product::where('id', $product)->first();
    $product =Product::find($product);

    dd(request, request->title, request->all());

  Laravel UI

  composer require laravel/ui

  Authenticated system
    Login
    Register
    Logout

    Laravel Mix  to Generate the Frontend Assests

     Compser Json
     package jSON
     WEBPACK JSON
  npm install && npm run dev

Middleware and How to restrict access and actions in laravel
  Middleware - control the specific  to access
      localhost/product/create   we can restrict some access
          http- kernel
          call handle method - authenticated the user
           public function __construct()
               {
                   $this->middleware('auth')->only(['index', 'show']);
               }

                public function __construct()
                   {
                       $this->middleware('auth')->except(['index', 'show']);
                   }


Using Implicit Model Binding In Laravel
   inject to me or bind to this method of an instance of any model
   Done automatically
   Route::get('products/{product}','ProductController@show')->name('products.show');
   Route::get('products/{product:title}','ProductController@show')->name('products.show');
   public  function show(Product  $product)


Resource Routes in Laravel
 -Handle specific model
 -Route::Resource();
 -Plular
 -Nama


 Form Request  to validate Data
   Form request  in a single class
    php artisan make:request  ProductRequest
    return true
    withvalidator
    $product = Product::create($request->all());   better way is -which validate the input
    $product = Product::create($request->validate());

 Using Artisan to create Multiple Components at Once
   Make sure you follow the order based on foreign key
   order table must be existed before you create payment table
   user table must be existed before you create order table

   ORDER TO CREATE
   user
   product
   image
   cart
   order
   payment

php artisan make:model --help
php artisan make:model  Image -a

 Payment       Product          Order           Image          user                     Cart
 id             id              id              id              id                      id
 amount         title           status          path            name                    created_at
 payed_at       description     customer_id     created_at      email                   updated_at
 order_id       price           created_at      updated_at      email_verified_at
 created_at     stock           updated_at                      password
 updated_at     status                                          remember_token
                created_at                                      admin_since
                updated_at                                      created_at
                                                                updated_at























































































